#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
"""

import asyncio
import sys
import os
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.agents.respondent_agent import RespondentAgent
from src.services.supabase_service import SupabaseService
from src.services.zep_service import ZepService
from aiogram import types
from aiogram.fsm.context import FSMContext


class TestExtendedInterview:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    
    def __init__(self):
        self.setup_complete = False
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ú–æ–∫–∞–µ–º Supabase
        self.mock_supabase = Mock(spec=SupabaseService)
        self.mock_supabase.update_session = Mock()
        self.mock_supabase.get_interview = Mock()
        
        # –ú–æ–∫–∞–µ–º Zep
        self.mock_zep = Mock(spec=ZepService)
        self.mock_zep.get_memory = AsyncMock(return_value=[])
        self.mock_zep.add_message = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["TELEGRAM_BOT_TOKEN"] = "test_bot_token"
        os.environ["OPENAI_API_KEY"] = "test_openai_key"
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        with patch('src.agents.respondent_agent.VoiceMessageHandler'), \
             patch('src.agents.respondent_agent.ChatOpenAI') as mock_chat:
            mock_chat.return_value = AsyncMock()
            self.agent = RespondentAgent(self.mock_supabase, self.mock_zep)
            
        # –ú–æ–∫–∞–µ–º LLM
        self.agent.llm = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º message –∏ state
        self.mock_message = Mock(spec=types.Message)
        self.mock_message.from_user = Mock()
        self.mock_message.from_user.id = 123456
        self.mock_message.from_user.username = "test_user"
        self.mock_message.answer = AsyncMock()
        self.mock_message.bot = Mock()
        self.mock_message.bot.send_message = AsyncMock()
        
        self.mock_state = Mock(spec=FSMContext)
        self.mock_state.get_data = AsyncMock()
        self.mock_state.update_data = AsyncMock()
        self.mock_state.clear = AsyncMock()
        
        self.setup_complete = True
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    async def test_no_question_limit(self):
        """–¢–µ—Å—Ç: –∏–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤"""
        print("\nüìù –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ª–∏–º–∏—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å 6 –æ—Ç–≤–µ—Ç–∞–º–∏
        answers = {
            f"–í–æ–ø—Ä–æ—Å {i}": f"–û—Ç–≤–µ—Ç {i}" for i in range(1, 7)
        }
        
        # –ú–æ–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–∞ - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∞ –Ω–µ None
        mock_response = Mock()
        mock_response.content = "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ 6 –æ—Ç–≤–µ—Ç–æ–≤?"
        self.agent.llm.ainvoke.return_value = mock_response
        
        # –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        next_question = await self.agent._generate_next_question(
            instruction="Test instruction",
            answers=answers,
            history=[]
        )
        
        print(f"‚úÖ –ü–æ—Å–ª–µ 6 –æ—Ç–≤–µ—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å: {next_question}")
        assert next_question is not None
        assert "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" in next_question
        
    async def test_interim_summary_at_milestones(self):
        """–¢–µ—Å—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ—Å–ª–µ 5, 10, 15 –æ—Ç–≤–µ—Ç–æ–≤"""
        print("\nüìä –¢–µ—Å—Ç 2: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é —Å researcher_telegram_id
        test_interview = {
            "id": "test_interview_id",
            "researcher_telegram_id": 987654321
        }
        self.mock_supabase.get_interview.return_value = test_interview
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        test_data = {
            "session_id": "test_session",
            "interview_id": "test_interview_id",
            "answers": {},
            "last_question": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
            "zep_session_id": "test_zep_session",
            "instruction": "Test instruction"
        }
        self.mock_state.get_data.return_value = test_data
        
        # –ú–æ–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é summary
        with patch.object(self.agent, '_generate_summary', return_value="–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Ä–µ–∑—é–º–µ"):
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å–ª–µ 5 –æ—Ç–≤–µ—Ç–æ–≤
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ 5 –æ—Ç–≤–µ—Ç–æ–≤...")
            test_data["answers"] = {f"Q{i}": f"A{i}" for i in range(1, 5)}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 5-–π –æ—Ç–≤–µ—Ç
            await self.agent._process_message("–ü—è—Ç—ã–π –æ—Ç–≤–µ—Ç", self.mock_message, self.mock_state)
            
            # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è async –∑–∞–¥–∞—á–∏
            await asyncio.sleep(0.1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ summary –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            assert self.mock_message.bot.send_message.called
            call_args = self.mock_message.bot.send_message.call_args
            assert call_args[0][0] == 987654321  # researcher_id
            assert "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç (5 –æ—Ç–≤–µ—Ç–æ–≤)" in call_args[0][1]
            assert "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è" in call_args[0][1]
            print("     ‚úì –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ 5 –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
    async def test_inactivity_timer(self):
        """–¢–µ—Å—Ç: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        print("\n‚è±Ô∏è  –¢–µ—Å—Ç 3: –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        test_data = {"inactivity_timer": None}
        self.mock_state.get_data.return_value = test_data
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        await self.agent._start_inactivity_timer(self.mock_message, self.mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–π–º–µ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω
        assert self.mock_state.update_data.called
        update_args = self.mock_state.update_data.call_args[1]
        assert "inactivity_timer" in update_args
        assert update_args["inactivity_timer"] is not None
        print("   ‚úì –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        timer_task = update_args["inactivity_timer"]
        test_data["inactivity_timer"] = timer_task
        
        await self.agent._cancel_inactivity_timer(self.mock_state)
        assert timer_task.cancelled()
        print("   ‚úì –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
        
    async def test_finish_only_on_request(self):
        """–¢–µ—Å—Ç: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüèÅ –¢–µ—Å—Ç 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        test_data = {
            "session_id": "test_session",
            "interview_id": "test_interview_id",
            "answers": {f"Q{i}": f"A{i}" for i in range(1, 11)},  # 10 –æ—Ç–≤–µ—Ç–æ–≤
            "last_question": "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å",
            "zep_session_id": "test_zep_session"
        }
        self.mock_state.get_data.return_value = test_data
        
        # –¢–µ—Å—Ç 1: –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ 10 –æ—Ç–≤–µ—Ç–æ–≤...")
        mock_response = Mock()
        mock_response.content = "–ï—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å?"
        self.agent.llm.ainvoke.return_value = mock_response
        
        await self.agent._process_message("–û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç", self.mock_message, self.mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤—å—é –ù–ï –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å
        assert not self.mock_state.clear.called
        print("     ‚úì –ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
        
        # –¢–µ—Å—Ç 2: –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É...")
        with patch.object(self.agent, '_finish_interview') as mock_finish:
            await self.agent._process_message("–•–≤–∞—Ç–∏—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", self.mock_message, self.mock_state)
            assert mock_finish.called
            print("     ‚úì –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É")
            
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é\n")
        print("="*50)
        
        if not self.setup_complete:
            await self.setup()
            
        try:
            await self.test_no_question_limit()
            await self.test_interim_summary_at_milestones()
            await self.test_inactivity_timer()
            await self.test_finish_only_on_request()
            
            print("\n" + "="*50)
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
            print("\nüìä –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
            print("‚Ä¢ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
            print("‚Ä¢ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ 5, 10, 15 –æ—Ç–≤–µ—Ç–æ–≤")
            print("‚Ä¢ –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã")
            print("‚Ä¢ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞")
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {str(e)}")
            import traceback
            traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tester = TestExtendedInterview()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())