#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ summary
"""

import asyncio
import os
from dotenv import load_dotenv
from loguru import logger

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from src.services.supabase_service import SupabaseService


async def test_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        supabase = SupabaseService()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
        test_data = {
            "researcher_telegram_id": 123456789,
            "topic": "Test interview for summary fix"
        }
        
        logger.info("–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é...")
        interview = supabase.create_interview(test_data)
        
        if interview:
            interview_id = interview["id"]
            logger.success(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {interview_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è researcher_telegram_id
            logger.info("–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            saved_interview = supabase.get_interview(interview_id)
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é: {saved_interview}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º researcher_telegram_id –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
            top_level_id = saved_interview.get("researcher_telegram_id")
            logger.info(f"researcher_telegram_id (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å): {top_level_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ fields
            fields_id = saved_interview.get("fields", {}).get("researcher_telegram_id")
            logger.info(f"researcher_telegram_id (–≤ fields): {fields_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
            logger.info("–û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ç–µ—Ä–≤—å—é...")
            update_data = {
                "status": "in_progress",
                "researcher_telegram_id": 987654321,
                "fields": {
                    "researcher_telegram_id": 987654321,
                    "updated": True
                }
            }
            
            try:
                updated = supabase.update_interview(interview_id, update_data)
                logger.success("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                final_interview = supabase.get_interview(interview_id)
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {final_interview}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å researcher_telegram_id: {e}")
                logger.info("–ü—Ä–æ–±—É—é –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ fields...")
                
                fallback_data = {
                    "status": "in_progress",
                    "fields": {
                        "researcher_telegram_id": 987654321,
                        "updated": True
                    }
                }
                updated = supabase.update_interview(interview_id, fallback_data)
                logger.success("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ fields")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def check_bot_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
    logger.info("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    required_vars = [
        "TELEGRAM_BOT_TOKEN",
        "OPENAI_API_KEY", 
        "SUPABASE_URL",
        "SUPABASE_KEY",
        "ZEP_API_KEY"
    ]
    
    missing = []
    for var in required_vars:
        if not os.getenv(var):
            missing.append(var)
            logger.error(f"‚ùå {var} –Ω–µ –∑–∞–¥–∞–Ω")
        else:
            logger.success(f"‚úÖ {var} –∑–∞–¥–∞–Ω")
    
    return len(missing) == 0


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_ok = await check_bot_config()
    if not config_ok:
        logger.error("\n‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_ok = await test_database_structure()
    
    if db_ok:
        logger.success("\n‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        logger.info("1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ SQL –º–∏–≥—Ä–∞—Ü–∏–∏: python apply_migrations.py")
        logger.info("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: ./stop_bot.sh && ./start_bot.sh")
        logger.info("3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É summary")
    else:
        logger.error("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        logger.info("\nüìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.info("1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase")
        logger.info("2. –ù–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã interviews")
        logger.info("3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPABASE_URL –∏ SUPABASE_KEY")


if __name__ == "__main__":
    asyncio.run(main())