#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ summary –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
"""

import asyncio
import json
from datetime import datetime
from unittest.mock import Mock, AsyncMock, patch
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.agents.respondent_agent import RespondentAgent
from src.services.supabase_service import SupabaseService
from src.services.zep_service import ZepService
from aiogram import types
from aiogram.fsm.context import FSMContext


class TestSummaryMechanism:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ summary"""
    
    def __init__(self):
        self.setup_complete = False
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ú–æ–∫–∞–µ–º Supabase
        self.mock_supabase = Mock(spec=SupabaseService)
        self.mock_supabase.update_session = Mock()
        self.mock_supabase.get_interview = Mock()
        
        # –ú–æ–∫–∞–µ–º Zep
        self.mock_zep = Mock(spec=ZepService)
        
        # –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["TELEGRAM_BOT_TOKEN"] = "test_bot_token"
        os.environ["OPENAI_API_KEY"] = "test_openai_key"
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ —Å –ø–∞—Ç—á–∏–Ω–≥–æ–º voice_handler –∏ ChatOpenAI
        with patch('src.agents.respondent_agent.VoiceMessageHandler'), \
             patch('src.agents.respondent_agent.ChatOpenAI') as mock_chat:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è ChatOpenAI
            mock_chat.return_value = AsyncMock()
            self.agent = RespondentAgent(self.mock_supabase, self.mock_zep)
            
        # –ú–æ–∫–∞–µ–º LLM –∞–≥–µ–Ω—Ç–∞
        self.agent.llm = AsyncMock()
        self.agent.llm.ainvoke = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º message –∏ state
        self.mock_message = Mock(spec=types.Message)
        self.mock_message.from_user = Mock()
        self.mock_message.from_user.username = "test_user"
        self.mock_message.answer = AsyncMock()
        self.mock_message.bot = Mock()
        self.mock_message.bot.send_message = AsyncMock()
        
        self.mock_state = Mock(spec=FSMContext)
        self.mock_state.get_data = AsyncMock()
        self.mock_state.clear = AsyncMock()
        
        self.setup_complete = True
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    async def test_summary_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary"""
        print("\nüìù –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è summary –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        test_answers = {
            "–ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Ä–µ—à–∏—Ç—å?": "–¢—Ä—É–¥–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–ö–∞–∫ —Å–µ–π—á–∞—Å —Ä–µ—à–∞–µ—Ç–µ —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É?": "–ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å–∏ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º, —Å–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ –Ω–∞ YouTube",
            "–ß—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ—à–µ–Ω–∏–∏?": "–ù–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω–∞—è",
            "–ö–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±—ã–ª–æ –±—ã –∏–¥–µ–∞–ª—å–Ω—ã–º?": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"
        }
        
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç LLM
        mock_response = Mock()
        mock_response.content = (
            "–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–∏—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. "
            "–¢–µ–∫—É—â–∏–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ —á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∏ YouTube –≤–∏–¥–µ–æ –Ω–µ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω. "
            "–û—Å–Ω–æ–≤–Ω–∞—è –±–æ–ª—å - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –æ–±—É—á–µ–Ω–∏—é. "
            "–ò–¥–µ–∞–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –≤–∏–¥–∏—Ç –∫—É—Ä—Å—ã —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏."
        )
        self.agent.llm.ainvoke.return_value = mock_response
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary
        summary = await self.agent._generate_summary(test_answers)
        
        print(f"‚úÖ Summary —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"   {summary[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LLM –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        assert self.agent.llm.ainvoke.called
        call_args = self.agent.llm.ainvoke.call_args[0][0]
        assert "–ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Ä–µ—à–∏—Ç—å?" in call_args
        assert "–¢—Ä—É–¥–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Ä–µ–º—è" in call_args
        
        return summary
        
    async def test_finish_interview_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é"""
        print("\nüîÑ –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        test_data = {
            "session_id": "test_session_123",
            "interview_id": "test_interview_456",
            "answers": {
                "–í–æ–ø—Ä–æ—Å 1": "–û—Ç–≤–µ—Ç 1",
                "–í–æ–ø—Ä–æ—Å 2": "–û—Ç–≤–µ—Ç 2"
            }
        }
        self.mock_state.get_data.return_value = test_data
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å ID –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
        test_interview = {
            "id": "test_interview_456",
            "fields": {
                "researcher_telegram_id": 123456789,
                "topic": "Test Interview"
            }
        }
        self.mock_supabase.get_interview.return_value = test_interview
        
        # –ú–æ–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é summary
        mock_summary = "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –∏–Ω—Ç–µ—Ä–≤—å—é"
        with patch.object(self.agent, '_generate_summary', return_value=mock_summary):
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
            await self.agent._finish_interview(self.mock_message, self.mock_state)
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–æ–≤:")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        assert self.mock_supabase.update_session.called
        update_args = self.mock_supabase.update_session.call_args
        assert update_args[0][0] == "test_session_123"
        assert update_args[0][1]["status"] == "completed"
        assert update_args[0][1]["summary"] == mock_summary
        print("   ‚úì –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'completed'")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
        assert self.mock_supabase.get_interview.called
        assert self.mock_supabase.get_interview.call_args[0][0] == "test_interview_456"
        print("   ‚úì –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—É—á–µ–Ω—ã")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é
        assert self.mock_message.bot.send_message.called
        send_args = self.mock_message.bot.send_message.call_args
        assert send_args[0][0] == 123456789  # researcher_id
        assert "–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ" in send_args[0][1]
        assert "@test_user" in send_args[0][1]
        assert mock_summary in send_args[0][1]
        print("   ‚úì Summary –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—É
        assert self.mock_message.answer.called
        thank_args = self.mock_message.answer.call_args
        assert "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ" in thank_args[0][0]
        print("   ‚úì –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—É")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        assert self.mock_state.clear.called
        print("   ‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
        
    async def test_researcher_id_fallback(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è researcher_id"""
        print("\nüîç –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ researcher_id –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "session_id": "test_session",
            "interview_id": "test_interview",
            "answers": {"Q": "A"}
        }
        self.mock_state.get_data.return_value = test_data
        
        # –¢–µ—Å—Ç 1: researcher_id –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ researcher_id –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ...")
        test_interview = {
            "researcher_telegram_id": 111111111
        }
        self.mock_supabase.get_interview.return_value = test_interview
        
        with patch.object(self.agent, '_generate_summary', return_value="Summary"):
            await self.agent._finish_interview(self.mock_message, self.mock_state)
        
        assert self.mock_message.bot.send_message.call_args[0][0] == 111111111
        print("     ‚úì –ù–∞–π–¥–µ–Ω –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ")
        
        # –¢–µ—Å—Ç 2: researcher_id –≤ fields
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ researcher_id –≤ fields...")
        test_interview = {
            "fields": {
                "researcher_telegram_id": 222222222
            }
        }
        self.mock_supabase.get_interview.return_value = test_interview
        self.mock_message.bot.send_message.reset_mock()
        
        with patch.object(self.agent, '_generate_summary', return_value="Summary"):
            await self.agent._finish_interview(self.mock_message, self.mock_state)
        
        assert self.mock_message.bot.send_message.call_args[0][0] == 222222222
        print("     ‚úì –ù–∞–π–¥–µ–Ω –≤ fields")
        
        # –¢–µ—Å—Ç 3: researcher_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è researcher_id...")
        test_interview = {
            "fields": {
                "topic": "Test"
            }
        }
        self.mock_supabase.get_interview.return_value = test_interview
        self.mock_message.bot.send_message.reset_mock()
        
        with patch.object(self.agent, '_generate_summary', return_value="Summary"):
            await self.agent._finish_interview(self.mock_message, self.mock_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        assert not self.mock_message.bot.send_message.called
        print("     ‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å)")
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–µ—Ö–∞–Ω–∏–∑–º–∞ summary\n")
        print("="*50)
        
        if not self.setup_complete:
            await self.setup()
            
        try:
            # –¢–µ—Å—Ç 1
            summary = await self.test_summary_generation()
            
            # –¢–µ—Å—Ç 2
            await self.test_finish_interview_flow()
            
            # –¢–µ—Å—Ç 3
            await self.test_researcher_id_fallback()
            
            print("\n" + "="*50)
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print("‚Ä¢ Summary –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            print("‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {str(e)}")
            import traceback
            traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tester = TestSummaryMechanism()
    await tester.run_all_tests()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(main())