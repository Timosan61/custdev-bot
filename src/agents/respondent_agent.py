from typing import Dict, Optional, List
from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from loguru import logger
import json
import os

from src.services.supabase_service import SupabaseService
from src.services.zep_service import ZepService
from src.services.voice_handler import VoiceMessageHandler
from src.utils.keyboards import get_finish_keyboard
from src.state.user_states import RespondentStates

class RespondentAgent:
    def __init__(self, supabase: SupabaseService, zep: ZepService):
        self.supabase = supabase
        self.zep = zep
        # Initialize voice handler with bot token
        bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.voice_handler = VoiceMessageHandler(bot_token=bot_token)
        self.llm = ChatOpenAI(model_name="gpt-4o", temperature=0.7)
    
    async def start_interview(self, message: types.Message, state: FSMContext, interview_id: str):
        user_id = message.from_user.id
        
        # Get interview details
        interview = self.supabase.get_interview(interview_id)
        if not interview:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # Create response record
        response = self.supabase.create_response({
            "interview_id": interview_id,
            "respondent_telegram_id": user_id,
            "answers": {}
        })
        if not response:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
            return
        response_id = response["id"]
        
        # Create Zep session
        zep_session_id = f"respondent_{user_id}_{interview_id}_{response_id}"
        await self.zep.create_session(zep_session_id, {
            "user_id": user_id,
            "interview_id": interview_id,
            "response_id": response_id,
            "type": "respondent"
        })
        
        # Save to state
        await state.update_data(
            interview_id=interview_id,
            response_id=response_id,
            zep_session_id=zep_session_id,
            instruction=interview.get("fields", {}).get("instruction", interview.get("instruction", "")),
            answers={}
        )
        
        # Send welcome message
        welcome_text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é!</b>\n\n"
            "–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã, –∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.\n"
            "–û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ —á–µ—Å—Ç–Ω–æ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å, —Å–∫–∞–∂–∏—Ç–µ '—Ö–≤–∞—Ç–∏—Ç' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        
        await message.answer(welcome_text, reply_markup=get_finish_keyboard())
        
        # Generate and ask first question
        first_question = await self._generate_first_question(interview.get("fields", {}).get("instruction", interview.get("instruction", "")))
        await message.answer(first_question)
        
        # Save first question in state
        await state.update_data(last_question=first_question)
        
        # Log to Zep
        await self.zep.add_message(zep_session_id, "assistant", welcome_text)
        await self.zep.add_message(zep_session_id, "assistant", first_question)
    
    async def process_text_message(self, message: types.Message, state: FSMContext):
        await self._process_message(message.text, message, state)
    
    async def process_voice_message(self, message: types.Message, state: FSMContext, bot: Bot):
        # Send processing indicator
        processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # Process voice message
        result = await self.voice_handler.process_voice_message(
            file_id=message.voice.file_id,
            duration=message.voice.duration
        )
        
        # Delete processing message
        await bot.delete_message(message.chat.id, processing_msg.message_id)
        
        if result["success"]:
            text = result["transcription"]
            logger.info(f"Voice transcribed: {text}")
            
            # Show what was recognized
            await message.answer(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <i>{text}</i>")
            
            # Process the message
            await self._process_message(text, message, state)
        else:
            error = result.get("error", "Unknown error")
            logger.error(f"Voice processing failed: {error}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
    
    async def _process_message(self, text: str, message: types.Message, state: FSMContext):
        data = await state.get_data()
        user_id = message.from_user.id
        response_id = data.get("response_id")
        zep_session_id = data.get("zep_session_id")
        instruction = data.get("instruction", "")
        answers = data.get("answers", {})
        last_question = data.get("last_question", "")
        
        logger.info(f"Processing respondent message from user {user_id}: {text[:50]}...")
        
        # Log user message to Zep
        await self.zep.add_message(zep_session_id, "user", text)
        
        # Check if user wants to finish
        if any(word in text.lower() for word in ["—Ö–≤–∞—Ç–∏—Ç", "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–≤—Å–µ", "‚úÖ –∑–∞–≤–µ—Ä—à–∏—Ç—å"]):
            await self._finish_interview(message, state)
            return
        
        # Save answer
        answers[last_question] = text
        await state.update_data(answers=answers)
        
        # Update response in database
        self.supabase.update_response(response_id, {"answers": answers})
        
        # Get conversation history
        history = await self.zep.get_memory(zep_session_id, last_n=10)
        
        # Generate next question
        next_question = await self._generate_next_question(instruction, answers, history)
        
        if next_question:
            await message.answer(next_question)
            await self.zep.add_message(zep_session_id, "assistant", next_question)
            # Save the question for context
            await state.update_data(last_question=next_question)
        else:
            await self._finish_interview(message, state)
    
    async def _generate_first_question(self, instruction: str) -> str:
        prompt = PromptTemplate(
            input_variables=["instruction"],
            template="""
            –¢—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –∫–∞—Å—Ç–¥–µ–≤-–∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
            {instruction}
            
            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞.
            –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å –∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É.
            
            –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
            """
        )
        
        response = await self.llm.ainvoke(prompt.format(instruction=instruction))
        return response.content
    
    async def _generate_next_question(self, instruction: str, answers: Dict, history: List) -> Optional[str]:
        # Check if we have enough information
        if len(answers) >= 5:  # Limit to 5 questions
            return None
        
        history_text = "\n".join([
            f"{msg.role}: {msg.content}" 
            for msg in history[-6:]  # Last 3 exchanges
        ])
        
        prompt = PromptTemplate(
            input_variables=["instruction", "history", "answers_count"],
            template="""
            –¢—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –∫–∞—Å—Ç–¥–µ–≤-–∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
            {instruction}
            
            –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
            {history}
            
            –£–∂–µ –∑–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {answers_count}
            
            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π:
            1. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
            2. –õ–æ–≥–∏—á–Ω–æ –≤—ã—Ç–µ–∫–∞–µ—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
            3. –£–≥–ª—É–±–ª—è–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã
            4. –ü–æ–±—É–∂–¥–∞–µ—Ç –∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É
            5. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            
            –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:
            - "–ü–æ–Ω–∏–º–∞—é, –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–∞ —ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏. –ê –∫–∞–∫–∏–µ –µ—â–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä?"
            - "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –≤—ã —É–ø–æ–º—è–Ω—É–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Å –∫–∞–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å?"
            
            –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –∑–∞–¥–∞–Ω–æ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–µ—Ä–Ω–∏ "FINISH".
            
            –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ "FINISH", –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
            """
        )
        
        response = await self.llm.ainvoke(
            prompt.format(
                instruction=instruction,
                history=history_text,
                answers_count=len(answers)
            )
        )
        
        content = response.content.strip()
        if content == "FINISH":
            return None
        return content
    
    async def _finish_interview(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        response_id = data.get("response_id")
        interview_id = data.get("interview_id")
        answers = data.get("answers", {})
        
        # Generate summary
        summary = await self._generate_summary(answers)
        
        # Update response
        self.supabase.update_response(response_id, {
            "status": "completed",
            "summary": summary
        })
        
        # Send to researcher
        interview = self.supabase.get_interview(interview_id)
        if interview and interview.get("researcher_telegram_id"):
            researcher_id = interview["researcher_telegram_id"]
            
            summary_text = (
                f"üìä <b>–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</b>\n\n"
                f"<b>–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:</b> @{message.from_user.username or 'anonymous'}\n\n"
                f"<b>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:</b>\n{summary}\n\n"
                f"<b>–ü–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>"
            )
            
            try:
                await message.bot.send_message(researcher_id, summary_text)
            except Exception as e:
                logger.error(f"Failed to send summary to researcher: {e}")
        
        # Thank respondent
        thank_text = (
            "üôè <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é!</b>\n\n"
            "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å –∏ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç.\n"
            "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
        )
        
        await message.answer(thank_text, reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
    
    async def _generate_summary(self, answers: Dict) -> str:
        qa_text = "\n\n".join([
            f"–í–æ–ø—Ä–æ—Å: {q}\n–û—Ç–≤–µ—Ç: {a}" 
            for q, a in answers.items()
        ])
        
        prompt = PromptTemplate(
            input_variables=["qa_text"],
            template="""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).
            
            –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:
            {qa_text}
            
            –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã, –±–æ–ª–∏, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞.
            –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.
            """
        )
        
        response = await self.llm.ainvoke(prompt.format(qa_text=qa_text))
        return response.content